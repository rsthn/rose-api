
(shield:method-required "GET")

(shield:validate-data input (gateway.request) (object
    token (rules
        required true
        min-length 8
        max-length 256
        pattern identifier
        check:@invalid_token (eq? (config.system.token) ($))
    )
))

(set file "conf/scripts/pull")
(when-not (path:exists (file))
    (throw "Update script not found: conf/scripts/pull"))

(gateway:header "content-type: text/html")

;; *********************
(set cur_db_version_hash (crypto:hash "sha1" (file:read "conf/db-version.conf")))

(echo "ðŸ“¢ Updating files...")
(echo "<pre>" (html-text:encode (sys:shell "rose :deploy (file)")) "</pre>")
(echo "<br/>")

(set new_db_version_hash (crypto:hash "sha1" (file:read "conf/db-version.conf")))

(when (eq? (cur_db_version_hash) (new_db_version_hash))
    (echo "âœ… Database structure is up to date.")
    (stop)
)

;; *********************
(echo "ðŸ“¢ Updating database ...<br/>")

;; Load environment configuration file.
(when-not (path:exists "conf/db-version.conf")
    (file:write "conf/db-version.conf" ""))

(set conf (config:parse (file:read "conf/db-version.conf")))
(when-not (conf.database) (set conf.database (&)))

;; Load list of patches with prefix "db-".
(set patches (array:sort 
    (map (filter (dir:files "conf/database") (and (ends-with? ".sql" (i.name)) (starts-with? "db-" (i.name))))
        (& name (i.name) path (i.path) version (array:at 1 (split "-" (i.name))) ))
    (str:compare (a.version) (b.version))
))

;; 
(def-fn firstline value
    (array:first (split "\n" (value)))
)

(set failed false)
(db:exec "BEGIN")

(for patch (patches)

    (when (and (not-null? (conf.database.version)) (le? (str:compare (patch.version) (conf.database.version)) 0))
        (echo "ðŸ”¥ Skipping patch <b>(patch.name)</b>")
        (continue)
    )

    ;; Load patch file and remove comments.
    (echo "ðŸ§ª Importing patch <b>(patch.name)</b>")
    (set query (file:read (patch.path)))
    (set query (re:replace "|/\*.*?\*/|s" "" (query)))
    (set query (re:replace "|--.*|" "" (query)))

    ;; Execute each query and record the completion status.
    (set failed false)
    (for query (filter i (map k (split (? (in? (query) ";;") ";;" ";") (query)) (trim (k))) (ne? "" (i)))
        (try
            (db:exec (query))
            (echo (concat "\tâœ… " (firstline (query))))
        catch
            (echo (concat "\tâ›” " (firstline (query)) "\n\tðŸ’¥ " (str:replace "\n" "\n\t\t" (err))))
            (set failed true)
            (break)
        )
    )

    ;; Stop if a patch query failed.
    (when (failed) (break))
    (set conf.database.version (patch.version))
)

;; Save latest known correct version stored.
(file:write "conf/db-version.conf" (config:str (conf)))

(when (failed)
    (db:exec "ROLLBACK"))

(when-not (failed)
    (db:exec "COMMIT")
    (echo "ðŸŽ‰ Database is up to date!")
)
