#!rose :deploy

# Configuration variables.
SOURCE git_repository_url
#SOURCE https://{env:get GITHUB_USER}:{env:get GITHUB_PASS}@github.com/repo-user/repo-name
ENV_VAR ROSE_ENV

# General validation.
CHDIR ../..

IF {not {path:exists "rose-env"}}
    FAIL Current working directory is not a Rose project.
END-IF

IF {not {env:get {ENV_VAR}}}
    FAIL Environment variable {clr 96}{ENV_VAR}{clr 0} is not set.
END-IF

#IF {not {env:get GITHUB_USER}}
#    FAIL Environment variable GITHUB_USER not set.
#END-IF

#IF {not {env:get GITHUB_PASS}}
#    FAIL Environment variable GITHUB_PASS not set.
#END-IF

IF {not {path:exists {path:append "conf" "{env:get {ENV_VAR}}.conf"}}}
    FAIL Configuration file {clr 96}conf/{env:get {ENV_VAR}}.conf{clr 0} does not exist.
END-IF

IF {eq? "git_repository_url" {SOURCE}}
    FAIL Repository URL is not set.
END-IF

# Pull code from repository into temporal dir.
TEMP {path:append {path:cwd} tmp}
EXEC git clone "{SOURCE}" "{TEMP}"

# Get commit hash.
PUSHD
CHDIR {TEMP}
COMMIT {re:get `/commit ([A-Fa-f0-9]+)/` {sys:shell "git log -n 1"} 1}
POPD

# Copy files from temporal dir.
ECHO ðŸ§ª Updating ...

DEL {TEMP}/conf/prod.conf
DEL {TEMP}/conf/db-version.conf

r0 {TEMP}/conf
DIRCOPY conf

r0 {TEMP}/fn
DIRCOPY fn

r0 {TEMP}/lib
DIRCOPY lib

r0 {TEMP}/strings
DIRCOPY strings

r0 {TEMP}/periodic.php
COPY .

r0 {TEMP}/composer.json
COPY .

r0 {TEMP}/composer.lock
COPY .

# Clean front-end folder and copy front-end distribution folder.
#RMDIR ../img
#CLEAN ..
#r0 {TEMP}/redist
#DIRCOPY ..

# Configure.
ECHO ðŸ§ª Setting environment <b>{env:get {ENV_VAR}}</b> ...
r0 {env:get {ENV_VAR}}
WRITE rose-env

r0 {COMMIT}
WRITE COMMIT

# Clean temporal folder.
RMDIR {TEMP}

# Install dependencies.
ECHO
ECHO ðŸ§ª Current packages:
EXEC composer show

ECHO ðŸ§ª Updating packages ...
EXEC composer install
EXEC composer show

# Completed.
ECHO
ECHO ðŸŽ« Commit: {file:read COMMIT}
ECHO âœ¨ Upgraded to version: {file:read "VERSION"}
