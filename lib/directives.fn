
;; Returns a random code of the specified length (solely digits).
;; @param {int} digits
;; @returns {string}
;; 
(def-fn dx::rand digits
    (set code "")
    (while (lt (len (code)) (digits))
        (append code (mod (utils::rand) 10)))
    (substr 0 (digits) (code))
)


; Sets the value of an integer directive.
(def-fn d::integer:set subject_id type value
    (db::exec `
        INSERT INTO ##directives SET
            last_modified='{datetime::now}', subject_id={!subject_id}, type={!type}, intval={!value}
        ON DUPLICATE KEY UPDATE
            last_modified='{datetime::now}', intval={!value}
    `)
)

; Returns the value of an integer directive.
(def-fn d::integer:get subject_id type
    (db::scalar `SELECT intval FROM ##directives WHERE subject_id={!subject_id} AND type={!type}`)
)

; Sets the value of an string directive.
(def-fn d::string:set subject_id type value
    (db::exec `
        INSERT INTO ##directives SET
            last_modified='{datetime::now}', subject_id={!subject_id}, type={!type}, strval={!value}
        ON DUPLICATE KEY UPDATE
            last_modified='{datetime::now}', strval={!value}
    `)
)

; Returns the value of an string directive.
(def-fn d::string:get subject_id type
    (db::scalar `SELECT strval FROM ##directives WHERE subject_id={!subject_id} AND type={!type}`)
)

; Sets the value of an object directive.
(def-fn d::object:set subject_id type value
    (db::exec `
        INSERT INTO ##directives SET
            last_modified='{datetime::now}', subject_id={!subject_id}, type={!type}, textval={db::escape {utils::json:stringify {value}}}
        ON DUPLICATE KEY UPDATE
            last_modified='{datetime::now}', textval={db::escape {utils::json:stringify {value}}}
    `)
)

; Returns the value of an object directive.
(def-fn d::object:get subject_id type
    (utils::json:parse (db::scalar `SELECT textval FROM ##directives WHERE subject_id={!subject_id} AND type={!type}`))
)

; Returns boolean indicating if the specified directive exists.
(def-fn d::exists subject_id type
    (isnotnull (db::scalar `SELECT 1 FROM ##directives WHERE subject_id={!subject_id} AND type={!type}`))
)

; Returns the subject_id given a directive type and string value.
(def-fn d::subject type value
    (db::scalar `SELECT subject_id FROM ##directives WHERE type={!type} AND strval={!value}`)
)

; Deletes a directive and all of its variations (string, integer and object).
(def-fn d::delete subject_id type
    (db::exec `DELETE FROM ##directives WHERE subject_id={!subject_id} AND type={!type}`)
)
