; *************************************************************************
(def-fn updateList inputData requestField id tableName idFieldName valueFieldName

    (shield::validateData (inputData) formb
        (shield::field (requestField)
            output list
            required false
            pattern integer-list
        )
    )

    (if (isnotnull (formb.list))
        (db::exec `UPDATE {tableName} SET tag=1 WHERE {idFieldName}={id}`)

        (db::exec `
            INSERT INTO {tableName} ({idFieldName}, {valueFieldName}) VALUES
            {join ',' {map i {split ',' {formb.list}} '({id}, {i})'}}
            ON DUPLICATE KEY UPDATE tag=0
        `)

        (db::exec `DELETE FROM {tableName} WHERE {idFieldName}={id} AND tag=1`)
    )
)

; *************************************************************************
(def-fn updatePicture inputData requestField id tableName idFieldName valueFieldName width height

    (shield::validateData (inputData) formb
        (shield::field (requestField)
            output picture
            required false
            file-type:image png,jpg
            max-file-size:16m 16777216
            set (image::load (formData._selfValue.path))
        )
    )

    (if (isnotnull (formb.picture))
        (set x (db::row `SELECT {valueFieldName} as picture FROM {tableName} WHERE {idFieldName}={id}`))

        (if (isnotnull (x.picture))
            (file::remove (x.picture)))

        (set target "storage/(replace '#' '' (tableName))/(id)_(utils::rand).jpg")
        (file::write (target) (image::data (image::smartcut (formb.picture) (width) (height) 0 0 true) jpg))

        (db::exec `UPDATE {tableName} SET {valueFieldName}={!target} WHERE {idFieldName}={id}`)
    )
)

; *************************************************************************
(def-fn getPictureUrl path
    (str (gateway.ep) "/" (?? (path) "storage/blank.png"))
)
