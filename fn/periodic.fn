
(import "lib/directives")

(if (ne? (config.periodic.enabled) "true")
    (throw "not enabled"))

(if (not (path:exists "conf/periodic"))
    (throw "folder `conf/periodic` does not exist"))

(set now (str (datetime:now)))

(if (dve:exists "periodic/last")
    (set delta (datetime:diff (now) (dve:get-str "periodic/last")))
     (if (lt? (delta) (config.periodic.interval))
        (throw "interval not reached \((- (config.periodic.interval) (delta)) seconds remaining\)"))
)

(if (eq? (dve:get-int "periodic/last") 1)
    (throw "already running"))

(dve:set-int "periodic/last" 1)
(dve:set-str "periodic/last" (now))

(gateway:persistent)

(for subject (dve:get-all "periodic/task")

    (set info (dve:get-obj "periodic/task" (subject)))
    (when-not (info) (set info (&)))
    (when-not (info.next_at) (set info.next_at (now)))
    (when-not (info.runs) (set info.runs 0))

    (when-not (info.period)
        (continue))

    (when (lt? (str:compare (now) (info.next_at)) 0)
        (continue))

    (while (ge? (str:compare (now) (info.next_at)) 0)
        (set info.next_at (str (datetime:add (info.next_at) (info.period) "seconds"))))

    (inc info.runs)
    (dve:set-obj "periodic/task" (info) (subject))

	(try
		(eval (file:read "conf/periodic/(subject).fn"))
	catch
		(echo "[ERROR] [(now)] (subject): (err)")
		(trace-alt "periodic" "[ERROR] [(now)] (subject): (err)")
	)
)


(dve:set-int "periodic/count" (+ 1 (dve:get-int "periodic/count")))
(dve:set-int "periodic/last" 0)

(&)
